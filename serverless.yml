service:
  name: q-and-a-backend

custom:
  dynamodb-offline-port: 8000
  dynamodb:
    stages:
      - development
    start:
      port: ${self:custom.dynamodb-offline-port}
      dbPath: db/
      migrate: true
  serverless-offline-dynamodb-streams:
    endpoint: http://localhost:${self:custom.dynamodb-offline-port}
    region: localhost
    accessKeyId: root
    secretAccessKey: root
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: npm
  serverless-offline:
    httpPort: 8080
    useChildProcesses: true
  middleware:
    pre:
      - src/middleware/source-map.noop
    pos:
      - catch: src/middleware/error-handler.errorHandler

plugins:
  - serverless-dotenv-plugin
  - serverless-middleware
  - serverless-webpack
  - serverless-offline-dynamodb-streams
  - serverless-dynamodb-local
  - serverless-offline

resources:
  - ${file(./resources/dynamodb-meetings-table.yml)}
  - ${file(./resources/dynamodb-questions-table.yml)}
  - ${file(./resources/dynamodb-votes-table.yml)}
  - ${file(./resources/cognito-user-pool.yml)}
  - ${file(./resources/cognito-user-pool-domain.yml)}
  - ${file(./resources/cognito-user-pool-google-identity-provider.yml)}
  - ${file(./resources/cognito-user-pool-web-client.yml)}
  - ${file(./resources/api-gateway-cognito-authorizer.yml)}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'us-east-1'}
  profile: ${opt:profile, 'q-and-a-admin'}
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

functions:
  # Meeting endpoints
  getMeeting:
    handler:
      - src/meeting/schema.getMeetingValidator
      - src/meeting/controller.getMeeting
    events:
      - http:
          method: get
          path: meetings/{meetingId}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: APIGatewayCognitoAuthorizer
  createMeeting:
    handler:
      - src/meeting/schema.createMeetingValidator
      - src/meeting/controller.createMeeting
    events:
      - http:
          method: post
          path: meetings
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: APIGatewayCognitoAuthorizer
  deleteMeeting:
    handler:
      - src/meeting/schema.deleteMeetingValidator
      - src/meeting/controller.deleteMeeting
    events:
      - http:
          method: delete
          path: meetings/{meetingId}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: APIGatewayCognitoAuthorizer
  updateMeeting:
    handler:
      - src/meeting/schema.updateMeetingValidator
      - src/meeting/controller.updateMeeting
    events:
      - http:
          method: patch
          path: meetings/{meetingId}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: APIGatewayCognitoAuthorizer
  getQuestionsOfMeeting:
    handler:
      - src/meeting/schema.getQuestionsOfMeetingValidator
      - src/meeting/controller.getQuestionsOfMeeting
    events:
      - http:
          method: get
          path: meetings/{meetingId}/questions
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: APIGatewayCognitoAuthorizer
  # Question endpoints
  createQuestion:
    handler:
      - src/question/schema.createQuestionValidator
      - src/question/controller.createQuestion
    events:
      - http:
          method: post
          path: questions
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: APIGatewayCognitoAuthorizer
  updateVoteCountsOfQuestions:
    handler: src/question/controller.updateVoteCountsOfQuestions
    events:
      - stream:
          enabled: true
          type: dynamodb
          arn:
            Fn::ImportValue: VotesTableStreamArn
          batchSize: 10
          startingPosition: LATEST
  # Vote endpoints
  voteQuestion:
    handler:
      - src/vote/schema.voteQuestionValidator
      - src/vote/controller.voteQuestion
    events:
      - http:
          method: put
          path: questions/{questionId}/vote
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: APIGatewayCognitoAuthorizer
  getVotesOfCurrentUser:
    handler:
      - src/vote/schema.getVotesOfCurrentUserValidator
      - src/vote/controller.getVotesOfCurrentUser
    events:
      - http:
          method: get
          path: meetings/{meetingId}/users/me/votes
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: APIGatewayCognitoAuthorizer
